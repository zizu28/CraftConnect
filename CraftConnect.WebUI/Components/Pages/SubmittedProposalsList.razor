@page "/proposals"
@using CraftConnect.WebUI.Components.SharedComponents
@using CraftConnect.WebUI.Components.SubmittedProposalsListPageComponents
@using CraftConnect.WebUI.Enums

<SubmittedPropsalsListNavbar />
<div class="proposals-container">
    <header class="page-header">
        <h1>My Proposals</h1>
    </header>

    <div class="toolbar-container">
        <div class="search-container">
            <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
            </svg>
            <InputText @bind-Value="searchTerm" @oninput="OnSearchInput" class="search-input" placeholder="Search by project or client" />
        </div>
        <div class="filter-buttons">
            <button class="filter-btn @(currentFilter == null ? "active" : "")" @onclick="() => ChangeFilter(null)">All</button>
            <button class="filter-btn @(currentFilter == ProposalStatus.Pending ? "active" : "")" @onclick="() => ChangeFilter(ProposalStatus.Pending)">Pending</button>
            <button class="filter-btn @(currentFilter == ProposalStatus.Accepted ? "active" : "")" @onclick="() => ChangeFilter(ProposalStatus.Accepted)">Accepted</button>
            <button class="filter-btn @(currentFilter == ProposalStatus.Rejected ? "active" : "")" @onclick="() => ChangeFilter(ProposalStatus.Rejected)">Rejected</button>
            <button class="filter-btn @(currentFilter == ProposalStatus.Withdrawn ? "active" : "")" @onclick="() => ChangeFilter(ProposalStatus.Withdrawn)">Withdrawn</button>
        </div>
    </div>

    <div class="table-container">
        <table class="proposals-table">
            <thead>
                <tr>
                    <th>PROJECT TITLE</th>
                    <th>CLIENT</th>
                    <th>SUBMITTED</th>
                    <th>STATUS</th>
                    <th>ACTION</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proposal in PaginatedProposals)
                {
                    <tr>
                        <td class="cell-project-title">@proposal.ProjectTitle</td>
                        <td>@proposal.ClientName</td>
                        <td>@proposal.SubmittedDate.ToString("MMM dd, yyyy")</td>
                        <td><StatusBadge Status="proposal.Status" /></td>
                        <td><a href="/proposals/@proposal.Id" class="action-link">View Details</a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <Pagination CurrentPage="currentPage" TotalPages="TotalPages" OnPageChange="OnPageSelected" />
</div>

@code {
    private List<ProposalVM> allProposals = new();
    private string searchTerm = "";
    private ProposalStatus? currentFilter = null; // null for "All"
    private int currentPage = 1;
    private int pageSize = 4; // As seen in the image

    // Property to get the filtered list based on search and status
    private List<ProposalVM> FilteredProposals
    {
        get
        {
            var filtered = allProposals.AsEnumerable();

            if (currentFilter.HasValue)
            {
                filtered = filtered.Where(p => p.Status == currentFilter.Value);
            }

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                string lowerSearch = searchTerm.ToLower();
                filtered = filtered.Where(p =>
                    p.ProjectTitle.ToLower().Contains(lowerSearch) ||
                    p.ClientName.ToLower().Contains(lowerSearch));
            }

            return filtered.ToList();
        }
    }

    // Property to get the correctly paginated list
    private IEnumerable<ProposalVM> PaginatedProposals => FilteredProposals
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    // Property to calculate total pages dynamically
    private int TotalPages => (int)Math.Ceiling(FilteredProposals.Count / (double)pageSize);

    protected override void OnInitialized()
    {
        // Load mock data based on the image
        allProposals = new List<ProposalVM>
        {
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Custom Oak Bookshelf for Living Room", ClientName = "Jane Doe", SubmittedDate = new DateTime(2023, 10, 26), Status = ProposalStatus.Pending },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Kitchen Renovation", ClientName = "John Smith", SubmittedDate = new DateTime(2023, 10, 24), Status = ProposalStatus.Accepted },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Garden Landscaping", ClientName = "Emily White", SubmittedDate = new DateTime(2023, 10, 22), Status = ProposalStatus.Rejected },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Bespoke Walnut Desk", ClientName = "Michael Brown", SubmittedDate = new DateTime(2023, 10, 20), Status = ProposalStatus.Withdrawn },
            // Add more data to test pagination (page 2)
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Attic Conversion", ClientName = "Sarah Lee", SubmittedDate = new DateTime(2023, 10, 19), Status = ProposalStatus.Pending },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Bathroom Remodel", ClientName = "David Kim", SubmittedDate = new DateTime(2023, 10, 18), Status = ProposalStatus.Accepted },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Patio Decking", ClientName = "Chris Taylor", SubmittedDate = new DateTime(2023, 10, 17), Status = ProposalStatus.Pending },
            // Add more data to test pagination (page 3)
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Home Office Setup", ClientName = "Alex Johnson", SubmittedDate = new DateTime(2023, 10, 15), Status = ProposalStatus.Rejected },
            new ProposalVM { Id = Guid.NewGuid(), ProjectTitle = "Driveway Paving", ClientName = "Maria Garcia", SubmittedDate = new DateTime(2023, 10, 14), Status = ProposalStatus.Withdrawn }
        };
    }

    private void ChangeFilter(ProposalStatus? filter)
    {
        currentFilter = filter;
        currentPage = 1; // Reset to first page on filter change
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1; // Reset to first page on search
    }

    private void OnPageSelected(int page)
    {
        currentPage = page;
    }
}