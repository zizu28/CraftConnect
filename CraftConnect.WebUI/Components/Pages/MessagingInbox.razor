@page "/customer/messages"
@using CraftConnect.WebUI.Components.MessagingInboxPageComponents
@inject NavigationManager NavManager

<div class="messaging-page-container">
    <div class="messaging-sidebar">
        <SidebarHeader User="@CurrentUser" />
        <SidebarNav />
        <ConversationList Conversations="@Conversations" OnConversationSelect="HandleConversationSelect" />
    </div>

    <div class="messaging-main-content">
        @if (ActivePartner != null)
        {
            <ChatHeader Partner="@ActivePartner" />
            <ChatWindow Messages="@ActiveConversationMessages" />
            <ChatInput />
        }
        else
        {
            <div class="empty-chat-state">Select a conversation to begin chatting.</div>
        }
    </div>
</div>

@code {
    private UserProfileVM CurrentUser = new() { Name = "John Doe", Title = "Customer", AvatarUrl = "/images/user-john.jpg", IsCustomer = true };
    private UserProfileVM PartnerJane = new() { Name = "Jane Smith", Title = "Artisan | Woodworker", AvatarUrl = "/images/user-jane.jpg", IsCustomer = false };
    private UserProfileVM? ActivePartner { get; set; }

    private List<ConversationPreviewVM> Conversations { get; set; } = new();
    private List<MessageVM> ActiveConversationMessages { get; set; } = new();

    protected override void OnInitialized()
    {
        Conversations = GetMockConversations();
        
        // Load the first conversation by default
        if (Conversations.Any())
        {
            ActivePartner = PartnerJane; // Mocking the partner
            ActiveConversationMessages = GetMockMessages();
        }
    }

    private void HandleConversationSelect(ConversationPreviewVM conversation)
    {
        // In a real app, logic here would fetch the selected conversation's messages
        // For mock, we just toggle to the fixed partner
        ActivePartner = PartnerJane; 
        ActiveConversationMessages = GetMockMessages();
        StateHasChanged();
    }
    
    // Mock Data Methods
    private List<ConversationPreviewVM> GetMockConversations() => new()
    {
        new() { PartnerName = "Jane Smith", LastMessageSnippet = "Sure. I can send you some sample...", PartnerAvatarUrl = "/images/user-jane.jpg", IsActive = true, IsOnline = true },
        new() { PartnerName = "Bob Johnson", LastMessageSnippet = "The quote for the custom bookshelf...", PartnerAvatarUrl = "/images/user-bob.jpg", IsActive = false, IsOnline = false },
        new() { PartnerName = "Alice Williams", LastMessageSnippet = "Can you provide more details about...", PartnerAvatarUrl = "/images/user-alice.jpg", IsActive = false, IsOnline = true },
        new() { PartnerName = "Michael Brown", LastMessageSnippet = "Let me know if you have any questions...", PartnerAvatarUrl = "/images/user-michael.jpg", IsActive = false, IsOnline = false },
    };
    
    private List<MessageVM> GetMockMessages() => new()
    {
        new() { Text = "Hi John, I'm interested in the custom shelf project. Do you have any reference images or dimensions?", Timestamp = DateTime.Parse("2025-10-23 14:40"), IsSentByCurrentUser = false },
        new() { Text = "Hello Jane! Thanks for reaching out. Yes, I have a rough sketch. Let me attach it. I'm thinking about 6ft tall and 3ft wide.", Timestamp = DateTime.Parse("2025-10-23 14:42"), IsSentByCurrentUser = true },
        new() { Text = "Perfect, that's very helpful. I can work with that. I have a few wood options in mind. I can send you some samples of my work if you'd like.", Timestamp = DateTime.Parse("2025-10-23 14:44"), IsSentByCurrentUser = false },
        new() { Text = "Sure. I can send you some samples of my work.", Timestamp = DateTime.Parse("2025-10-23 14:45"), IsSentByCurrentUser = true },
    };
}